"""
Report generation utilities for code review results.
Supports JSON and Markdown formats.
"""
import json
import os
from datetime import datetime
from typing import Dict


def save_json_report(report: Dict, output_dir: str = "outputs") -> str:
    """
    Save report as JSON file.
    
    Args:
        report: Report dictionary from workflow
        output_dir: Directory to save reports
        
    Returns:
        Path to saved JSON file
    """
    os.makedirs(output_dir, exist_ok=True)
    
    # Generate filename with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"review_{timestamp}.json"
    filepath = os.path.join(output_dir, filename)
    
    # Save JSON
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2)
    
    return filepath


def save_markdown_report(report: Dict, output_dir: str = "outputs") -> str:
    """
    Save report as Markdown file.
    
    Args:
        report: Report dictionary from workflow
        output_dir: Directory to save reports
        
    Returns:
        Path to saved Markdown file
    """
    os.makedirs(output_dir, exist_ok=True)
    
    # Generate filename with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"review_{timestamp}.md"
    filepath = os.path.join(output_dir, filename)
    
    # Build markdown content
    summary = report['summary']
    bugs = report['bugs']
    optimizations = report['optimizations']
    
    md_content = f"""# Code Review Report

## üìã Summary
- **File**: {summary['file']}
- **Language**: {summary['language']}
- **Lines of Code**: {summary['lines_of_code']}
- **Timestamp**: {summary['timestamp']}
- **Overall Severity**: {summary['overall_severity']}

## üêõ Bugs Found: {len(bugs)}

"""
    
    if bugs:
        for i, bug in enumerate(bugs, 1):
            md_content += f"""### Bug #{i} - {bug.get('severity', 'unknown').upper()}
- **Line**: {bug.get('line', 'N/A')}
- **Type**: {bug.get('type', 'unknown')}
- **Description**: {bug.get('description', 'No description')}
- **Suggestion**: {bug.get('suggestion', 'No suggestion')}
- **Confidence**: {bug.get('confidence', 0):.2f}

"""
    else:
        md_content += "*No bugs detected*\n\n"
    
    md_content += f"## ‚ö° Optimizations: {len(optimizations)}\n\n"
    
    if optimizations:
        for i, opt in enumerate(optimizations, 1):
            md_content += f"""### Optimization #{i} - {opt.get('impact', 'unknown').upper()} Impact
- **Type**: {opt.get('type', 'unknown')}
- **Line**: {opt.get('line', 'N/A')}
- **Category**: {opt.get('category', 'unknown')}
- **Description**: {opt.get('description', 'No description')}
- **Suggestion**: {opt.get('suggestion', 'No suggestion')}

"""
    else:
        md_content += "*No optimizations suggested*\n\n"
    
    md_content += f"""---
*Generated by AI Code Reviewer*
"""
    
    # Save markdown
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(md_content)
    
    return filepath


def print_report_summary(report: Dict):
    """Print a formatted summary to console."""
    summary = report['summary']
    bugs = report['bugs']
    optimizations = report['optimizations']
    
    print("\n" + "="*60)
    print("üìä CODE REVIEW SUMMARY")
    print("="*60)
    print(f"File: {summary['file']}")
    print(f"Language: {summary['language']}")
    print(f"Lines: {summary['lines_of_code']}")
    print(f"Overall Severity: {summary['overall_severity']}")
    print("-"*60)
    print(f"üêõ Bugs Found: {len(bugs)}")
    
    severity_dist = report['severity_distribution']
    if any(severity_dist.values()):
        print(f"   - Critical: {severity_dist['critical']}")
        print(f"   - High: {severity_dist['high']}")
        print(f"   - Medium: {severity_dist['medium']}")
        print(f"   - Low: {severity_dist['low']}")
    
    print(f"‚ö° Optimizations: {len(optimizations)}")
    print("="*60 + "\n")
